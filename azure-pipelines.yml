# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '06225fd4-07c1-420b-a2c3-10ac0101ffde'
  imageRepository: 'redashudemoaksexto'
  containerRegistry: 'extoaksashu.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'extoaksashu7512670a-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'redashudemoaksexto.ashu-project'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/*.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: HelmDeploy@0
            displayName: Deploy Helm Chart
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'ext-360-cluster-ashu-project'  # Replace with your Kubernetes service connection name
              namespace: 'ashu-project'  # Replace with your target Kubernetes namespace
              command: 'upgrade'
              chartType: 'Path'
              chartPath: '$(Pipeline.Workspace)/manifests/ashu-chart'  # Path to your Helm chart
              releaseName: 'ashu-release-test'  # Replace with your Helm release name
              overrideValues: |
                image.repository=$(containerRegistry)/$(imageRepository)
                image.tag=$(tag)
                imagePullSecrets[0].name=$(imagePullSecret)     


          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersionToInstall: 'latest'

          - task: HelmInstaller@1
            displayName: 'Add Bitnami Helm Repository'
            inputs:
              command: 'repo add'
              repoName: 'bitnami'
              repoURL: 'https://charts.bitnami.com/bitnami'

          - task: HelmInstaller@1
            displayName: 'Update Helm Repositories'
            inputs:
              command: 'repo update'

          - task: HelmDeploy@0
            displayName: 'Deploy Helm Chart'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: 'ext-360-cluster-ashu-project'  # Replace with your Kubernetes service connection name
              namespace: 'ashu-project'  # Replace with your target Kubernetes namespace
              command: 'upgrade'
              chartType: 'Repo'
              chartName: 'bitnami/nginx'  # Helm chart name in the Bitnami repository
              releaseName: 'nginx-release'  # Replace with your desired Helm release name
              
              #overrideValues: |
               # image.repository=$(containerRegistry)/$(imageRepository)
               # image.tag=$(tag)
               # imagePullSecrets[0].name=$(imagePullSecret)
